#!/usr/bin/env bash

# Build a patched package.
#
# This shell script downloads all dependencies and tools needed to build the
# desired package; applies any existing patches to it, and runs the standard
# Debian packaging tools to generate a new package that can be used to replace
# the original one.



# Shell setup
# ===========

# Bash options for strict error checking
set -o errexit -o errtrace -o pipefail -o nounset

# Trace all commands
set -o xtrace

# Check dependencies.
command -v quilt >/dev/null || {
    echo "ERROR: 'quilt' is not installed; please install it (package 'quilt')"
    exit 1
}
command -v dch >/dev/null || {
    echo "ERROR: 'dch' is not installed; please install it (package 'devscripts')"
    exit 1
}
command -v dpkg-buildpackage >/dev/null || {
    # Includes 'dpkg-parsechangelog'
    echo "ERROR: 'dpkg-buildpackage' is not installed; please install it (package 'dpkg-dev')"
    exit 1
}

# Check permissions.
[[ "$(id -u)" -eq 0 ]] || {
    echo "ERROR: Please run as root (or with 'sudo'); this script installs packages with apt-get"
    exit 1
}



# Configure Apt
# =============

# Disable interactive prompts
export DEBIAN_FRONTEND="noninteractive"

# Uncomment system's source repositories.
sed --regexp-extended --in-place \
    's/# *(deb-src.*focal.*(main|restricted|universe|multiverse))/\1/' \
    /etc/apt/sources.list

apt-get update



# Install build dependencies
# ==========================

PACKAGE_NAME="gstreamer1.0-plugins-good"

SOURCE_NAME="$(apt-cache madison "$PACKAGE_NAME" | grep Sources | head -n1 | awk '{print $1}')" || {
    echo "ERROR: Cannot find source repos for apt-get; make sure they are enabled in your system"
    exit 1
}

apt-get build-dep --yes "$SOURCE_NAME"



# Prepare source package
# ======================

# Download the original sources from system repositories.
apt-get source "$SOURCE_NAME"
pushd ./"$SOURCE_NAME"*/

# Add patches to the quilt storage.
# During the build process, these will be applied to the source code.
mkdir -p ./debian/patches/
for FILE in ../*.patch; do
    cp "$FILE" ./debian/patches/
    basename "$FILE" >> ./debian/patches/series
done

# Ensure that the patches can be cleanly applied over the original sources.
quilt push
quilt refresh

# Add a new changelog entry. Ensure that the Debian package version's Epoch
# is higher, to avoid it from getting replaced with system's updates.
# See Debian New Maintainers' Guide for info about Epoch in version numbers.
dch --local 'kurento' 'Apply patches for Kurento.'

function increment_epoch {
    local VERSION
    local EPOCH
    VERSION="$(apt-cache madison "$PACKAGE_NAME" | grep Packages | head -n1 | awk '{print $3}')"
    EPOCH="$(echo "$VERSION" | grep -Po '^\d+(?=:)')" || true # Can be empty.
    EPOCH="$((EPOCH+1))" # Makes it "1" if EPOCH was empty.
    export EPOCH # Make it available to sed subshell.
    # shellcheck disable=SC2016
    sed -ri '1 s/(.*\()([0-9]+:)?(.*)/echo "\1$EPOCH:\3"/e' debian/changelog
}
increment_epoch

# Store the definitive package version.
PACKAGE_VERSION="$(dpkg-parsechangelog --show-field Version)"



# Build source package
# ====================

dpkg-buildpackage -us -uc -b

popd # $SOURCE_NAME

# Move everything up; it is a convention to leave packages in the parent dir.
mv ./*.*deb ../



# Configure debian files
# ======================

sed "s/@PACKAGE_VERSION@/$PACKAGE_VERSION/g" debian/control.in \
    > debian/control
